// Project dependencies

dependencies {
	compile			project(':syncany-util')
	compile			project(':syncany-daemon')
	compile			project(':syncany-plugins:syncany-plugin-gui')
    
    runtime			project(':syncany-plugins:syncany-plugin-ftp')
    runtime			project(':syncany-plugins:syncany-plugin-sftp')
    runtime			project(':syncany-plugins:syncany-plugin-rest')  
	runtime			project(':syncany-plugins:syncany-plugin-webdav')  
	
	runtime			project(':syncany-plugins:syncany-plugin-gui-ftp')
	runtime			project(':syncany-plugins:syncany-plugin-gui-sftp')
    runtime			project(':syncany-plugins:syncany-plugin-gui-rest')  
	runtime			project(':syncany-plugins:syncany-plugin-gui-webdav')  
	
	compile			"commons-beanutils:commons-beanutils:1.9.0"
	compile			"org.eclipse.swt:org.eclipse.swt.${getSwtLibrary()}:4.3"
	compile			"org.java-websocket:Java-WebSocket:1.3.0"
	compile			"org.eclipse.jetty:jetty-server:9.1.0.RC2"
}

// Application Plugin ////////////////////////////////////////////////////////////
apply plugin: 'application'

// Application plugin specific parameter
mainClassName     = "org.syncany.gui.Launcher"
applicationName   = "syncany"

applicationDistribution.from("${rootProject.projectDir}/") {
	include "AUTHORS.md", "CHANGELOG.md", "LICENSE.md", "README.md"
}

distTar {
	baseName = "syncany"
	version = "$applicationVersionFull"
	compression = Compression.GZIP
	extension = "tar.gz"	
}

distZip {
	baseName = "syncany"
	version = "$applicationVersionFull"
}

// Windows EXE File ////////////////////////////////////////////////////////////
apply plugin: 'launch4j'
buildscript {
    repositories {
        mavenCentral()
    }

    dependencies {
        classpath "edu.sc.seis.gradle:launch4j:1.0.6"
    }
}

project.ext {
	clientExeFileName = "syncany.exe"
}

launch4j {
    mainClassName   = "org.syncany.gui.Launcher"
    icon            = "${rootProject.projectDir}/gradle/innosetup/setup-icon.ico"
    launch4jCmd     = "launch4j"
    outputDir       = "launch4j"
    dontWrapJar     = false
    headerType      = "gui"
    outfile         = "${project.clientExeFileName}"
    
    jreMinVersion   = '1.7.0_10'
    
    copyright       = "Syncany"
    
    initialHeapSize = 512
    maxHeapSize     = 1024
    mutexName       = "syncany-gui"
    windowTitle     = "Syncany Client"
}

// Windows Installer ///////////////////////////////////////////////////////////

task installerGui(dependsOn: ["installApp", "launch4j"]) << {
	def innoSetupDir = new File("${buildDir}/innosetup")

	delete innoSetupDir	
	innoSetupDir.mkdir();	
	
	copy {
		from("${rootProject.projectDir}/gradle/innosetup/setup-left.bmp")
		from("${rootProject.projectDir}/gradle/innosetup/setup-top.bmp")
		from("${rootProject.projectDir}/gradle/innosetup/setup-info-before.rtf")		
		from("${rootProject.projectDir}/gradle/innosetup/setup-info-after.rtf")		
		from("${rootProject.projectDir}/gradle/innosetup/setup-icon.ico")		
		into(innoSetupDir)
	}

	copy {
		from("${rootProject.projectDir}/syncany-gui/build/launch4j/${project.clientExeFileName}")
		into("${rootProject.projectDir}/syncany-gui/build/install/syncany")
	}
	
	copy {
		from("${rootProject.projectDir}/gradle/innosetup/setup.gui.iss.skel")
		rename("setup.gui.iss.skel", "setup.iss")
		expand([
			applicationVersion: "${applicationVersion}",
			applicationVersionFull: "${applicationVersionFull}",			
		])
		into(innoSetupDir)
	}

	exec {
		workingDir rootProject.projectDir
		commandLine "iscc ${innoSetupDir}/setup.iss".split()
	}
}

// syncany-gui tasks
task(runGui, dependsOn: 'classes', type: JavaExec) {
	main = "${mainClassName}"
	//SWT need -XStartOnFirstThread to run on OSX
	jvmArgs = getOsName().startsWith("mac") ? ['-XstartOnFirstThread'] : []	
	classpath = sourceSets.main.runtimeClasspath
}