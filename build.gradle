//
// Build script for main project
//

// Global Helpers //////////////////////////////////////////////////////////////

String getRevision() {
	try {
		def stdout = new ByteArrayOutputStream()

		exec {
			workingDir rootProject.projectDir
			commandLine 'git rev-parse --short HEAD'.split()
			standardOutput = stdout
		}

		return stdout.toString().trim()
	}
	catch (Exception e) {
		return "UNKNOWN"
	}
}


// Global Settings /////////////////////////////////////////////////////////////

project.ext {
	applicationRelease = false
	applicationVersion = "0.1-SNAPSHOT"
	applicationDate = new Date()
	applicationRevision = getRevision()
	applicationVersionFull = "${applicationVersion}-${applicationDate.format('yyMMddHHmm')}-${applicationRevision}"
}

// All projects settings  //////////////////////////////////////////////////////

repositories {
	mavenCentral()
}

// JavaDoc Requirements ////////////////////////////////////////////////////////

configurations {
	doclet 
}

allprojects {
	apply plugin: 'eclipse'	

	configurations {
		doclet
	}
	
	dependencies {
		doclet group: 'org.jboss.apiviz', name: 'apiviz', version: '1.3.2.GA'
	}
	
	repositories {
		mavenCentral()
	}
}

// Sub-Project Settings and Hooks //////////////////////////////////////////////

subprojects {
	apply plugin: 'java'
	
	group = 'org.syncany'		
		
	sourceCompatibility = 1.7
	targetCompatibility = 1.7
	
	repositories {
		mavenCentral()
		maven {
     	   url "https://swt-repo.googlecode.com/svn/repo/"
   	    }
	}
	
	sourceSets {
		main {
			java      { srcDir 'src/main/java'}
			resources { srcDir 'src/main/resources'}
		}
		
		test {
			java      { srcDir 'src/test/java'}
			resources { srcDir 'src/test/resources'}
		}
	}
	
	task testAllLong(type: Test, dependsOn: testClasses, group: 'Verification') {
		description = "Test long running scenarios"
		ignoreFailures = true
		maxParallelForks = 2
		testLogging { events 'started', 'passed'}
		include '**/LongRunning*'
	}
	
	task testScenario(type: Test, dependsOn: testClasses, group: 'Verification') {
		description = "Test all scenarios"
		ignoreFailures = true
		maxParallelForks = 2
		testLogging { events 'started', 'passed'}
		include '**/*ScenarioTest*'
	}
	
	task testAll(type: Test, dependsOn: testClasses, group: 'Verification') {
		description = "All tests"
		ignoreFailures = true
		maxParallelForks = 2
		testLogging { events 'started', 'passed'}
		exclude '**/*TestSuite*'
	}
	
	task testAllButLongCrypto(type: Test, dependsOn: testClasses, group: 'Verification') {
		jvmArgs '-Dcrypto.enable=true'
		description = "All tests except long running with crypto"
		ignoreFailures = true
		maxParallelForks = 2
		testLogging { events 'started', 'passed'}
		exclude '**/LongRunning*', '**/*TestSuite*'
	}
	
	test {
		group = "verification"	
		description = "All tests except long running"
		ignoreFailures = true
		maxParallelForks = 2
		testLogging { events 'started', 'passed'}
		exclude '**/LongRunning*', '**/*TestSuite*'
	}
	
	// JAR /////////////////////////////////////////////////////////////////////
	
	jar {
		baseName = "${project.name}"
		version  = "$applicationVersion"				
	}

	
	// Test JARs ///////////////////////////////////////////////////////////////
	
	task testJar(type: Jar, dependsOn: testClasses) {
		baseName = "test-${project.archivesBaseName}"
		from sourceSets.test.output
	}


	configurations {
	      tests
	}
	

	artifacts {
		tests testJar
	}	
		
	// Eclipse Settings and Hooks //////////////////////////////////////////////
	
	eclipse {
		classpath {
			downloadSources = true
		}
		
		jdt {
			sourceCompatibility = 1.7
			targetCompatibility = 1.7			
		}		
	}
	
	task eclipseSettings(type: Copy) {
		from rootProject.files(
			"gradle/eclipse/org.eclipse.jdt.ui.prefs",			
			"gradle/eclipse/org.eclipse.jdt.core.prefs"
		)
		
		into project.file('.settings/')
		
		outputs.upToDateWhen { 
			false 
		}
	}
	
	task cleanEclipseJdtUi(type: Delete) {
		delete project.file(".settings/")
		delete project.file("bin/")
	}	
	
	tasks["cleanEclipse"].dependsOn(cleanEclipseJdtUi)
	tasks["eclipse"].dependsOn(eclipseSettings)
}


// JavaDoc /////////////////////////////////////////////////////////////////////

task javadocAll(type: Javadoc) {
	group = "documentation"
	description = "Creates the JavaDoc for all subprojects and puts it into build/javadoc"
	
	source subprojects.collect { project -> project.sourceSets.main.allJava } 
	classpath = files(subprojects.collect { project -> project.sourceSets.main.compileClasspath }) 
	destinationDir = new File(projectDir, 'build/javadoc')
	
	doFirst {
	  subprojects.each { project -> project.sourceSets.main.output.each { dir -> dir.mkdirs() } }
	}
	
	options.linkSource = true
        options.addStringOption('sourceclasspath', files(subprojects.collect { project -> project.sourceSets.main.output }).getAsPath())

	configure(options) {
	        doclet "org.jboss.apiviz.APIviz"
	        docletpath file(configurations.doclet.asPath)
		windowTitle = 'Syncany API Documentation'
		docTitle = "Syncany JavaDoc ($applicationVersion)"
		bottom = " \
			<span style=\"font-size: 13px\"><br /> \
				<a href=\"http://www.syncany.org/\" target=\"_top\">Syncany</a> is an open-source cloud storage and filesharing application.<br /><br /> \
				Code located at <a href=\"https://github.com/binwiederhier/syncany\" target=\"_top\">https://github.com/binwiederhier/syncany</a><br /> \
				JavaDoc for version $applicationVersion generated based on commit <a href=\"https://github.com/binwiederhier/syncany/tree/$applicationRevision\" target=\"_top\">$applicationRevision</a> at $applicationDate<br /><br /> \
				Copyright &copy; 2011-2014 <a href=\"http://www.philippheckel.com/\" target=\"_top\">Philipp C. Heckel</a> \
			</span> \
		"
	}
}

task cleanJavadocAll(type: Delete) {
	group = "documentation"
	description = "Deletes the all subprojects from build/javadoc (completent to javadocAll)"
	delete 'build/javadoc'	
}

// Gradle Wrapper Tasks (for local gradlew scripts) ////////////////////////////

task wrapper(type: Wrapper) {
	gradleVersion = '1.10'
	jarFile = 'gradle/wrapper/wrapper.jar'
}


// Task to clean build folder on project root //////////////////////////////////	

task clean(type: Delete) {
	delete 'build'	
}

// Task to determine SWT library ///////////////////////////////////////////////

public String getOsName() {
	String osDefinition;
	String os = System.getProperty('os.name').toLowerCase().split()[0]; 
	String arch = System.getProperty("os.arch");
	String realArch = arch.substring(arch.length()-2, arch.length());

	return os + "_" + realArch;
}

public String getSwtLibrary(){
	String osName = getOsName();	
	String swtJarName;
	
	switch(getOsName()) {
		case 'windows_86':
   			swtJarName = 'win32.win32.x86'; 
   			break;
	  	case 'windows_64':
	    	swtJarName = 'win32.win32.x86_64' 
	    	break
	  	case 'linux_86':
	    	swtJarName = 'gtk.linux.x86' 
	    	break
	  	case 'linux_64':
	    	swtJarName = 'gtk.linux.x86_64' 
	    	break
	  	case 'mac_64':
	    	swtJarName = 'cocoa.macosx.x86_64'
	 		break
	  	case 'mac_86':
	    	swtJarName = 'cocoa.macosx' 
	    	break
	  	default:
	    	throw new Exception('Unknown OS')
	}
	
	return swtJarName;
}

// Global Tests ////////////////////////////////////////////////////////////////

task testGlobal(type: TestReport) {
	group = "verification"	
	description = "All the results from the 'test' task in all subprojects (global report!)"
	destinationDir = file("$buildDir/reports/all")
	reportOn subprojects*.test
}
