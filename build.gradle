//
// Build script for main project
//

// Global Helpers //////////////////////////////////////////////////////////////

def getRevision = { ->
	def stdout = new ByteArrayOutputStream()

	exec {
		workingDir rootProject.projectDir
		commandLine 'git rev-parse --short HEAD'.split()
		standardOutput = stdout
	}

	return stdout.toString().trim()
}


// Global Settings /////////////////////////////////////////////////////////////

project.ext {
	applicationRelease = false
	applicationVersion = "0.1-SNAPSHOT"
	applicationDate = new Date()
	applicationRevision = getRevision()
	applicationVersionFull = "${applicationVersion}-${applicationDate.format('yyMMddHHmm')}-${applicationRevision}"
}


// Sub-Project Settings and Hooks //////////////////////////////////////////////

subprojects {
	apply plugin: 'java'
	apply plugin: 'eclipse'
	
	group = 'org.syncany'		
		
	sourceCompatibility = 1.7
	targetCompatibility = 1.7
	
	repositories {
		mavenCentral()
	}
	
	sourceSets {
		main {
			java      { srcDir 'src/main/java'}
			resources { srcDir 'src/main/resources'}
		}
		
		test {
			java      { srcDir 'src/test/java'}
			resources { srcDir 'src/test/resources'}
		}
	}
	
	task testAllLong(type: Test, dependsOn: testClasses, group: 'Verification') {
		description = "Test long running scenarios"
		ignoreFailures = true
		maxParallelForks = 2
		testLogging { events 'started', 'passed'}
		include '**/LongRunning*'
	}
	
	task testScenario(type: Test, dependsOn: testClasses, group: 'Verification') {
		description = "Test all scenarios"
		ignoreFailures = true
		maxParallelForks = 2
		testLogging { events 'started', 'passed'}
		include '**/*ScenarioTest*'
	}
	
	task testAll(type: Test, dependsOn: testClasses, group: 'Verification') {
		description = "All tests"
		ignoreFailures = true
		maxParallelForks = 2
		testLogging { events 'started', 'passed'}
		exclude '**/*TestSuite*'
	}
	
	task testAllButLongCrypto(type: Test, dependsOn: testClasses, group: 'Verification') {
		jvmArgs '-Dcrypto.enable=true'
		description = "All tests except long running with crypto"
		ignoreFailures = true
		maxParallelForks = 2
		testLogging { events 'started', 'passed'}
		exclude '**/LongRunning*', '**/*TestSuite*'
	}
	
	test {
		group = "verification"	
		description = "All tests except long running"
		ignoreFailures = true
		maxParallelForks = 2
		testLogging { events 'started', 'passed'}
		exclude '**/LongRunning*', '**/*TestSuite*'
	}
	
	// JAR /////////////////////////////////////////////////////////////////////
	
	jar {
		baseName = "${project.name}"
		version  = "$applicationVersion"				
	}

	
	// Test JARs ///////////////////////////////////////////////////////////////
	
	task testJar(type: Jar, dependsOn: testClasses) {
		baseName = "test-${project.archivesBaseName}"
		from sourceSets.test.output
	}

	configurations {
		tests
	}

	artifacts {
		tests testJar
	}	
		
	// Eclipse Settings and Hooks //////////////////////////////////////////////
	
	eclipse {
		classpath {
			downloadSources = true
		}
		
		jdt {
			sourceCompatibility = 1.7
			targetCompatibility = 1.7			
		}		
	}
	
	task eclipseSettings(type: Copy) {
		from rootProject.files(
			"gradle/eclipse/org.eclipse.jdt.ui.prefs",			
			"gradle/eclipse/org.eclipse.jdt.core.prefs"
		)
		
		into project.file('.settings/')
		
		outputs.upToDateWhen { 
			false 
		}
	}
	
	task cleanEclipseJdtUi(type: Delete) {
		delete project.file(".settings/")
		delete project.file("bin/")
	}	
	
	tasks["cleanEclipse"].dependsOn(cleanEclipseJdtUi)
	tasks["eclipse"].dependsOn(eclipseSettings)
}


// JavaDoc /////////////////////////////////////////////////////////////////////

task javadocAll(type: Javadoc) {
	source subprojects.collect { project -> project.sourceSets.main.allJava } 
	classpath = files(subprojects.collect { project -> project.sourceSets.main.compileClasspath }) 
	destinationDir = new File(projectDir, 'build/javadoc')

	options.linkSource = true
    
	configure(options) {
		windowTitle = 'Syncany API Documentation'
		docTitle = "Syncany JavaDoc ($applicationVersion)"
		bottom = " \
			<span style=\"font-size: 13px\"><br /> \
				<a href=\"http://www.syncany.org/\" target=\"_top\">Syncany</a> is an open-source cloud storage and filesharing application.<br /><br /> \
				Code located at <a href=\"https://github.com/binwiederhier/syncany\" target=\"_top\">https://github.com/binwiederhier/syncany</a><br /> \
				JavaDoc for version $applicationVersion generated based on commit <a href=\"https://github.com/binwiederhier/syncany/tree/$applicationRevision\" target=\"_top\">$applicationRevision</a> at $applicationDate<br /><br /> \
				Copyright &copy; 2011-2014 <a href=\"http://www.philippheckel.com/\" target=\"_top\">Philipp C. Heckel</a> \
			</span> \
		"
	}
}

task cleanJavadoc(type: Delete) {
	delete 'build/javadoc'	
}


// Gradle Wrapper Tasks (for local gradlew scripts) ////////////////////////////

task wrapper(type: Wrapper) {
	gradleVersion = '1.9'
	jarFile = 'gradle/wrapper/wrapper.jar'
}


// Task to clean build folder on project root //////////////////////////////////	

task clean(type: Delete) {
	delete 'build'	
}

// Global Tests 

task testGlobal(type: TestReport) {
	destinationDir = file("$buildDir/reports/allTests")
	// Include the results from the `test` task in all subprojects
	reportOn subprojects*.test
}
